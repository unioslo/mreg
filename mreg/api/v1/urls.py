from django.urls import path, re_path

from . import views, views_hostgroups, views_zones, views_labels, views_bacnet, views_network_policy

from .endpoints import URL

urlpatterns = [
     path('bacnet/ids/', views_bacnet.BACnetIDList.as_view()),
     path('bacnet/ids/<id>', views_bacnet.BACnetIDDetail.as_view()),
     path('cnames/', views.CnameList.as_view()),
     path('cnames/<name>', views.CnameDetail.as_view()),
     path('dhcphosts/ipv4/', views.dhcp_hosts_all_v4),
     path('dhcphosts/ipv6/', views.dhcp_hosts_all_v6),
     path('dhcphosts/ipv6byipv4/<ip>/<range>', views.DhcpHostsV4ByV6.as_view()),
     path('dhcphosts/ipv6byipv4/', views.DhcpHostsV4ByV6.as_view()),
     path('dhcphosts/<ip>/<range>', views.dhcp_hosts_by_range),
     path('hinfos/', views.HinfoList.as_view()),
     path('hinfos/<pk>', views.HinfoDetail.as_view()),
     path('history/', views.HistoryList.as_view()),
     path('history/<pk>', views.HistoryDetail.as_view()),
     path('hosts/', views.HostList.as_view()),
     path('hosts/<name>', views.HostDetail.as_view()),
     path('hostgroups/', views_hostgroups.HostGroupList.as_view()),
     path('hostgroups/<name>', views_hostgroups.HostGroupDetail.as_view()),
     path('hostgroups/<name>/groups/', views_hostgroups.HostGroupGroupsList.as_view()),
     path('hostgroups/<name>/groups/<group>', views_hostgroups.HostGroupGroupsDetail.as_view()),
     path('hostgroups/<name>/hosts/', views_hostgroups.HostGroupHostsList.as_view()),
     path('hostgroups/<name>/hosts/<host>', views_hostgroups.HostGroupHostsDetail.as_view()),
     path('hostgroups/<name>/owners/', views_hostgroups.HostGroupOwnersList.as_view()),
     path('hostgroups/<name>/owners/<owner>', views_hostgroups.HostGroupOwnersDetail.as_view()),
     path('ipaddresses/', views.IpaddressList.as_view()),
     path('ipaddresses/<pk>', views.IpaddressDetail.as_view()),
     path('labels/', views_labels.LabelList.as_view()),
     path('labels/<pk>', views_labels.LabelDetail.as_view()),
     path('labels/name/<name>', views_labels.LabelDetailByName.as_view()),
     path('locs/', views.LocList.as_view()),
     path('locs/<pk>', views.LocDetail.as_view()),
     path('mxs/', views.MxList.as_view()),
     path('mxs/<pk>', views.MxDetail.as_view()),
     path('naptrs/', views.NaptrList.as_view()),
     path('naptrs/<pk>', views.NaptrDetail.as_view()),
     path('nameservers/', views.NameServerList.as_view()),
     path('nameservers/<name>', views.NameServerDetail.as_view()),
     path('ptroverrides/', views.PtrOverrideList.as_view()),
     path('ptroverrides/<pk>', views.PtrOverrideDetail.as_view()),
     path('sshfps/', views.SshfpList.as_view()),
     path('sshfps/<pk>', views.SshfpDetail.as_view()),
     path('srvs/', views.SrvList.as_view()),
     path('srvs/<pk>', views.SrvDetail.as_view()),
     path('networks/', views.NetworkList.as_view()),
     path('networks/ip/<ip>', views.network_by_ip),
     re_path(r'^networks/(?P<network>[^/]+/\d+)$', views.NetworkDetail.as_view()),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/excluded_ranges/$', views.NetworkExcludedRangeList.as_view()),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/excluded_ranges/(?P<pk>.+)',
               views.NetworkExcludedRangeDetail.as_view()),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/first_unused', views.network_first_unused),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/random_unused', views.network_random_unused),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/ptroverride_list', views.network_ptroverride_list),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/ptroverride_host_list', views.network_ptroverride_host_list),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/reserved_list', views.network_reserved_list),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/used_count', views.network_used_count),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/used_list', views.network_used_list),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/used_host_list', views.network_used_host_list),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/unused_count', views.network_unused_count),
     re_path(r'^networks/(?P<network>[^/]+/\d+)/unused_list', views.network_unused_list),
     path('txts/', views.TxtList.as_view()),
     path('txts/<pk>', views.TxtDetail.as_view()),
     path('zones/forward/', views_zones.ForwardZoneList.as_view()),
     path('zones/forward/hostname/<hostname>', views_zones.forward_zone_by_hostname),
     re_path(r'^zones/forward/(?P<name>(\d+/)?[^/]+)$', views_zones.ForwardZoneDetail.as_view()),
     re_path(r'^zones/forward/(?P<name>(\d+/)?[^/]+)/delegations/$', views_zones.ForwardZoneDelegationList.as_view()),
     re_path(r'^zones/forward/(?P<name>(\d+/)?[^/]+)/delegations/(?P<delegation>(.*))',
               views_zones.ForwardZoneDelegationDetail.as_view()),
     re_path(r'^zones/forward/(?P<name>(\d+/)?[^/]+)/nameservers$', views_zones.ForwardZoneNameServerDetail.as_view()),
     path('zones/reverse/', views_zones.ReverseZoneList.as_view()),
     re_path(r'^zones/reverse/(?P<name>(\d+/)?[^/]+)$', views_zones.ReverseZoneDetail.as_view()),
     re_path(r'^zones/reverse/(?P<name>(\d+/)?[^/]+)/delegations/$', views_zones.ReverseZoneDelegationList.as_view()),
     re_path(r'^zones/reverse/(?P<name>(\d+/)?[^/]+)/delegations/(?P<delegation>(.*))',
               views_zones.ReverseZoneDelegationDetail.as_view()),
     re_path(r'^zones/reverse/(?P<name>(\d+/)?[^/]+)/nameservers$', views_zones.ReverseZoneNameServerDetail.as_view()),
     re_path(r'^zonefiles/(?P<name>(\d+/)?[^/]+)', views_zones.zone_file_detail),
     path('permissions/netgroupregex/', views.NetGroupRegexPermissionList.as_view()),
     path('permissions/netgroupregex/<pk>', views.NetGroupRegexPermissionDetail.as_view()),

     # Network Policy-related endpoints
     path("networkpolicies/",
          views_network_policy.NetworkPolicyList.as_view(), name=URL.NetworkPolicy.LIST),
     path("networkpolicies/<int:pk>",
          views_network_policy.NetworkPolicyDetail.as_view(), name=URL.NetworkPolicy.DETAIL),
     path("networkpolicyattributes/",
          views_network_policy.NetworkPolicyAttributeList.as_view(), name=URL.NetworkPolicy.ATTRIBUTE_LIST),
     path("networkpolicyattributes/<int:pk>",
          views_network_policy.NetworkPolicyAttributeDetail.as_view(), name=URL.NetworkPolicy.ATTRIBUTE_DETAIL),

     # Community-related endpoints, through networks
     re_path(r"^networks/(?P<network>[^/]+/\d+)/communities/$",
          views_network_policy.NetworkCommunityList.as_view(), name=URL.NetworkPolicy.COMMUNITIES_LIST),
     re_path(r"^networks/(?P<network>[^/]+/\d+)/communities/(?P<cpk>\d+)$",
          views_network_policy.NetworkCommunityDetail.as_view(), name=URL.NetworkPolicy.COMMUNITY_DETAIL),
     re_path(r"^networks/(?P<network>[^/]+/\d+)/communities/(?P<cpk>\d+)/hosts/$",
          views_network_policy.NetworkCommunityHostList.as_view(), name=URL.NetworkPolicy.COMMUNITY_HOSTS_LIST),
     re_path(r"^networks/(?P<network>[^/]+/\d+)/communities/(?P<cpk>\d+)/hosts/(?P<hostpk>\d+)$",
          views_network_policy.NetworkCommunityHostDetail.as_view(), name=URL.NetworkPolicy.COMMUNITY_HOST_DETAIL),


]
