name: Container image
on:
  push:
    paths-ignore:
      - 'ci/**'
      - 'README.md'
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Docker build
      run: docker build -t mreg .
    - name: Save image
      run: docker save mreg | gzip > mreg.tgz
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: mreg
        path: mreg.tgz

  test:
    name: Unit tests
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: mreg
          POSTGRES_PASSWORD: mreg
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "pg_isready --username=mreg"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Map the containerized port to localhost.
          - 5432:5432
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: mreg
    - name: Load image
      run: docker load --input mreg.tgz
    - name: Run tests
      run: |
        docker run --rm -t --network host --entrypoint /app/entrypoint-test.sh \
        -e MREG_DB_HOST=localhost -e MREG_DB_PASSWORD=mreg -e MREG_DB_USER=mreg \
        mreg

  mreg-cli:
    name: Test with mreg-cli
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: mreg
    - name: Load container image
      run: docker load --input mreg.tgz
    - name: Tag container image
      # There's a docker-compose.yml file in the mreg-cli repo that wants the image from ghcr.io,
      # but we want to use the newly built custom image
      run: docker tag mreg ghcr.io/unioslo/mreg:latest
    - name: Checkout
      uses: actions/checkout@v4
    - name: Download mreg-cli
      run: git clone https://github.com/unioslo/mreg-cli.git
    - name: Check out a previous version of mreg-cli
      if: ${{ hashFiles('ci/MREG-CLI_COMMIT') != '' }}
      run: |
        cp -r mreg-cli/ci /tmp
        C=$(cat ci/MREG-CLI_COMMIT)
        cd mreg-cli
        git -c advice.detachedHead=false checkout $C
        cp --no-clobber /tmp/ci/* ci/
    - name: Run the tests
      run: mreg-cli/ci/run_testsuite_and_record_V2.sh
    - name: Comment on the commit that the tests worked
      run: |
        C=$(cd mreg-cli && git rev-parse HEAD)
        jq -nc "{\"body\": \"Works with https://github.com/unioslo/mreg-cli/commit/$C\"}" | \
        curl -sL  -X POST -d @- \
          -H "Content-Type: application/json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments"

  test-with-curl:
    name: Test with curl
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: mreg
          POSTGRES_PASSWORD: mreg
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "pg_isready --username=mreg"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Map the containerized port to localhost.
          - 5432:5432
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: mreg
    - name: Load container image
      run: docker load --input mreg.tgz
    - name: Start mreg
      run: |
        docker run --rm -t --network host --detach --name mreg \
        -e MREG_DB_HOST=localhost -e MREG_DB_PASSWORD=mreg -e MREG_DB_USER=mreg \
        mreg
    - name: Wait for mreg to create the database schema and start up
      run: sleep 10s
    - name: Create a user
      run: docker exec -t mreg uv run /app/manage.py create_mreg_superuser --username test --password test123
    - name: Authenticate using curl
      shell: bash
      run: |
        curl http://127.0.0.1:8000/api/token-auth/  \
          -X POST -H "Content-Type: application/json" \
          --data "{\"username\":\"test\",\"password\":\"test123\"}" \
          --output /tmp/curl_output.txt \
          --verbose --no-progress-meter \
          --write-out %{http_code} \
          > /tmp/http_status_code.txt 2> /tmp/curl_errors.txt
        STATUS=$(cat /tmp/http_status_code.txt)
        if [ $STATUS -ge 400 ]; then
          cat /tmp/curl_output.txt
          exit 1
        fi

  publish:
    name: Publish
    # only publish the image if this event was triggered by a version tag
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, mreg-cli, test-with-curl]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: mreg
    - name: Load image
      run: docker load --input mreg.tgz
    - name: Log in to registry
      run: >
        echo "${{ secrets.GITHUB_TOKEN }}"
        | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Push image
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/mreg
        TAG_NAME=latest
        docker tag mreg:latest $IMAGE_ID:$TAG_NAME
        docker push $IMAGE_ID:$TAG_NAME
